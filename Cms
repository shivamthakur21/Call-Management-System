import tkinter as tk
from tkinter import messagebox, simpledialog
import mysql.connector

# Database connection
db = mysql.connector.connect(
  host="localhost",
  user="root",
  password="2104",
  database="call_center"
)

cursor = db.cursor()

class AddCallDialog(tk.Toplevel):

    def _init_(self, parent):
        super()._init_(parent)
        
        self.call_type = tk.StringVar()
        self.duration = tk.IntVar()
        self.customer_id = tk.IntVar()
        self.agent_id = tk.IntVar()
        self.start_time = tk.StringVar()
        self.end_time = tk.StringVar()

        self.create_gui()

    def create_gui(self):
        # Widgets
        tk.Label(self, text="Call Type").grid(row=0, column=0)
        tk.Entry(self, textvariable=self.call_type).grid(row=0, column=1)

        tk.Label(self, text="Duration").grid(row=1, column=0)
        tk.Entry(self, textvariable=self.duration).grid(row=1, column=1)
        
        tk.Label(self, text="Customer ID").grid(row=2, column=0)
        tk.Entry(self, textvariable=self.customer_id).grid(row=2, column=1)
        
        tk.Label(self, text="Agent ID").grid(row=3, column=0)
        tk.Entry(self, textvariable=self.agent_id).grid(row=3, column=1)
        
        tk.Label(self, text="Start Time").grid(row=4, column=0)
        tk.Entry(self, textvariable=self.start_time).grid(row=4, column=1)
        
        tk.Label(self, text="End Time").grid(row=5, column=0)
        tk.Entry(self, textvariable=self.end_time).grid(row=5, column=1)

        # Other fields
        
        tk.Button(self, text="Save", command=self.add).grid(row=6, column=0, columnspan=2)

    def add(self):
        # Get values
        call_type = self.call_type.get()
        call_duration = self.duration.get()
        customer_id = self.customer_id.get()
        agent_id = self.agent_id.get()
        start_time = self.start_time.get()
        end_time = self.end_time.get()
        
        # Insert into db
        cursor.execute("SET FOREIGN_KEY_CHECKS=0")
        cursor.execute("INSERT INTO calls (call_type, call_duration, customer_id, agent_id, call_start_time,call_end_time) VALUES (%s, %s, %s, %s, %s,%s)", (call_type, call_duration, customer_id, agent_id, start_time, end_time))
        db.commit()
        messagebox.showinfo("Success", "Call created successfully!")
        get_all_calls_in_list()
        self.destroy()
            
class AddCallDialogForUpdate(tk.Toplevel):

    def _init_(self, parent):
        super()._init_(parent)
        
        self.update_id = tk.IntVar()
        self.call_type = tk.StringVar()
        self.duration = tk.IntVar()
        self.customer_id = tk.IntVar()
        self.agent_id = tk.IntVar()
        self.start_time = tk.StringVar()
        self.end_time = tk.StringVar()

        self.create_gui()

    def create_gui(self):
        # Widgets
        tk.Label(self, text="Update Id").grid(row=0, column=0)
        tk.Entry(self, textvariable=self.update_id).grid(row=0, column=1)
        
        tk.Label(self, text="Call Type").grid(row=1, column=0)
        tk.Entry(self, textvariable=self.call_type).grid(row=1, column=1)

        tk.Label(self, text="Duration").grid(row=2, column=0)
        tk.Entry(self, textvariable=self.duration).grid(row=2, column=1)
        
        tk.Label(self, text="Customer ID").grid(row=3, column=0)
        tk.Entry(self, textvariable=self.customer_id).grid(row=3, column=1)
        
        tk.Label(self, text="Agent ID").grid(row=4, column=0)
        tk.Entry(self, textvariable=self.agent_id).grid(row=4, column=1)
        
        tk.Label(self, text="Start Time").grid(row=5, column=0)
        tk.Entry(self, textvariable=self.start_time).grid(row=5, column=1)
        
        tk.Label(self, text="End Time").grid(row=6, column=0)
        tk.Entry(self, textvariable=self.end_time).grid(row=6, column=1)

        # Other fields
        
        tk.Button(self, text="Update", command=self.update).grid(row=7, column=0, columnspan=2)
        
    def update(self):
        # Get values
            updateid = self.update_id.get()
            call_type = self.call_type.get()
            call_duration = self.duration.get()
            customer_id = self.customer_id.get()
            agent_id = self.agent_id.get()
            start_time = self.start_time.get()
            end_time = self.end_time.get()
            # Insert into 
            cursor.execute("UPDATE calls SET call_type = %s, call_duration = %s, customer_id = %s, agent_id = %s, call_start_time = %s, call_end_time = %s WHERE customer_id = %s", (call_type, call_duration, customer_id, agent_id, start_time, end_time, updateid))
            db.commit()
            messagebox.showinfo("Update", "Uodated successfully!")
            self.destroy()
            
            
# Functions to interact with database
def get_all_calls_in_list():
    call_list.delete(0, tk.END)
    calls = get_all_calls()
    for call in calls:
         call_list.insert(tk.END, call)
         
def get_all_calls():
  cursor.execute("SELECT * FROM calls")
  return cursor.fetchall()


def get_call_by_id():
  id = simpledialog.askstring("Get Call By ID", "Enter call ID:", parent=root)
  cursor.execute("SELECT * FROM calls WHERE call_id=%s", (id,))
  call = cursor.fetchone()
  if call:
    call_list.delete(0, tk.END)
    call_list.insert(tk.END, call)
  else:
    messagebox.showerror("Error", "Call not found")

def create_call():
    add_call_dialog = AddCallDialog(root)
    add_call_dialog.grab_set()
    get_all_calls_in_list()

def update_call():
    # Execute UPDATE query
    add_call_dialog = AddCallDialogForUpdate(root)
    add_call_dialog.grab_set()
    get_all_calls_in_list()


  
def delete_call():
  # Execute DELETE query
  id = simpledialog.askstring("Delete Call", "Enter Call ID:", parent=root)
  cursor.execute("SELECT * FROM calls WHERE customer_id=%s", (id,))
  call = cursor.fetchone()
  print()
  if call is not None:
    confirm = messagebox.askquestion("Confirm Delete", f"Delete call {id}?")
    if confirm == "yes":
      cursor.execute("DELETE FROM calls WHERE customer_id = %s", (id,))
      db.commit()
      get_all_calls_in_list()
  else:
    messagebox.showerror("Error", "Caller id not found")

# GUI
root = tk.Tk()
root.title("Call Center Management")
root.minsize(600, 400)
root.maxsize(1200, 800)
column_label = tk.Label(root)
column_label.pack()

# Get list of column names
cursor.execute("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='calls'")
columns = cursor.fetchall()

# Join column names into a string  
column_text = ", ".join([c[0] for c in columns])

# Set label text
column_label.config(text=column_text)
# Listbox to show calls
call_list = tk.Listbox(root, height=20, width=100)
call_list.pack()

# Load and display calls
calls = get_all_calls()
for call in calls:
  call_list.insert(tk.END, call)
  
# Frame for buttons  
button_frame = tk.Frame(root)
button_frame.pack()

# Buttons
viewall_button = tk.Button(button_frame, text="View All", command=get_all_calls_in_list)
viewone_button = tk.Button(button_frame, text="View one", command=get_call_by_id)
add_button = tk.Button(button_frame, text="Add", command=create_call) 
update_button = tk.Button(button_frame, text="Update", command=update_call)
delete_button = tk.Button(button_frame, text="Delete", command=delete_call)

viewall_button.grid(row=0, column=0)  
viewone_button.grid(row=0, column=1)  
add_button.grid(row=0, column=2)
update_button.grid(row=0, column=3)
delete_button.grid(row=0, column=4)

root.mainloop()